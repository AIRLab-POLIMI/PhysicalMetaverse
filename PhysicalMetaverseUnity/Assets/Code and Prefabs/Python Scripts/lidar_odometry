import math
import socket
import time

#listen socket port 25666
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind(('127.0.0.1', 25668))

def calculate_odometry(scan1, scan2):
    if len(scan1) != len(scan2):
        raise ValueError("Scans must have the same length")

    #don't compare distances that are too far apart
    for i in range(len(scan1)):
        if abs(scan1[i] - scan2[i]) > 10000:
            scan1[i] = 0
            scan2[i] = 0
            
    delta_distances = [scan2[i] - scan1[i] for i in range(len([0]))]
    total_distance = sum(delta_distances)
    
    mean_angle = math.atan2(
        sum(delta_distances[i] * math.sin(math.radians(i)) for i in range(len([0]))),
        sum(delta_distances[i] * math.cos(math.radians(i)) for i in range(len([0])))
    )
    
    return total_distance, math.degrees(mean_angle)

#init scan2 to 360 zeros
scan2 = [0 for i in range(360)]

def loop():
    global scan2
    #receive and print scan
    data, addr = sock.recvfrom(65536)
    #parse b'[(0,24999750),(1,24999750),(2,24999750),(3,24999750),(4,24999750),(5,24999750),(6,24999750),(7,24999750),(8,24999750),(9,24999750),(10,24999750),(11,24999750),(12,24999750),(13,24999750),(14,24999750),(15,24999750),(16,24999750),(17,775),(18,747),(19,738),(20,740),(21,734),(22,738),(23,746),(24,769),(25,24999750),(26,24999750),(27,24999750),(28,24999750),(29,24999750),(30,24999750),(31,24999750),(32,24999750),(33,24999750),(34,24999750),(35,24999750),(36,24999750),(37,24999750),(38,24999750),(39,24999750),(40,24999750),(41,24999750),(42,24999750),(43,24999750),(44,24999750),(45,24999750),(46,24999750),(47,24999750),(48,24999750),(49,24999750),(50,24999750),(51,24999750),(52,24999750),(53,24999750),(54,24999750),(55,24999750),(56,24999750),(57,440),(58,360),(59,398),(60,400),(61,402),(62,405),(63,407),(64,410),(65,413),(66,955),(67,946),(68,937),(69,929),(70,911),(71,927),(72,907),(73,499),(74,485),(75,471),(76,458),(77,462),(78,468),(79,474),(80,480),(81,486),(82,898),(83,854),(84,851),(85,848),(86,846),(87,844),(88,842),(89,840),(90,793),(91,838),(92,837),(93,836),(94,836),(95,836),(96,836),(97,836),(98,837),(99,838),(100,846),(101,840),(102,463),(103,450),(104,438),(105,427),(106,417),(107,415),(108,416),(109,417),(110,418),(111,420),(112,421),(113,423),(114,424),(115,435),(116,466),(117,902),(118,879),(119,900),(120,878),(121,930),(122,939),(123,947),(124,956),(125,966),(126,976),(127,986),(128,997),(129,961),(130,1021),(131,24999750),(132,24999750),(133,24999750),(134,752),(135,753),(136,753),(137,754),(138,24999750),(139,24999750),(140,24999750),(141,24999750),(142,24999750),(143,442),(144,429),(145,417),(146,406),(147,406),(148,411),(149,416),(150,422),(151,444),(152,433),(153,1058),(154,1022),(155,1008),(156,986),(157,528),(158,519),(159,510),(160,501),(161,505),(162,515),(163,525),(164,537),(165,826),(166,813),(167,800),(168,788),(169,777),(170,766),(171,755),(172,746),(173,736),(174,697),(175,733),(176,711),(177,703),(178,696),(179,689),(180,682),(181,676),(182,670),(183,690),(184,659),(185,654),(186,647),(187,644),(188,640),(189,636),(190,632),(191,586),(192,655),(193,622),(194,619),(195,616),(196,614),(197,590),(198,610),(199,608),(200,606),(201,605),(202,603),(203,602),(204,601),(205,601),(206,600),(207,600),(208,599),(209,599),(210,600),(211,600),(212,595),(213,601),(214,602),(215,603),(216,605),(217,606),(218,608),(219,633),(220,612),(221,614),(222,24999750),(223,619),(224,622),(225,625),(226,629),(227,593),(228,636),(229,640),(230,24999750),(231,24999750),(232,24999750),(233,24999750),(234,24999750),(235,24999750),(236,24999750),(237,24999750),(238,24999750),(239,24999750),(240,24999750),(241,24999750),(242,24999750),(243,24999750),(244,24999750),(245,24999750),(246,24999750),(247,24999750),(248,24999750),(249,24999750),(250,24999750),(251,24999750),(252,24999750),(253,24999750),(254,24999750),(255,24999750),(256,24999750),(257,24999750),(258,24999750),(259,24999750),(260,24999750),(261,856),(262,837),(263,819),(264,802),(265,787),(266,772),(267,757),(268,744),(269,731),(270,719),(271,708),(272,697),(273,686),(274,676),(275,667),(276,658),(277,649),(278,641),(279,634),(280,626),(281,619),(282,659),(283,606),(284,636),(285,594),(286,589),(287,584),(288,579),(289,574),(290,570),(291,566),(292,562),(293,558),(294,566),(295,551),(296,548),(297,545),(298,543),(299,540),(300,538),(301,536),(302,534),(303,532),(304,494),(305,529),(306,528),(307,527),(308,526),(309,525),(310,524),(311,524),(312,524),(313,507),(314,524),(315,524),(316,524),(317,525),(318,525),(319,526),(320,527),(321,528),(322,530),(323,531),(324,533),(325,535),(326,537),(327,539),(328,541),(329,568),(330,547),(331,550),(332,362),(333,345),(334,329),(335,314),(336,304),(337,304),(338,303),(339,281),(340,302),(341,302),(342,302),(343,302),(344,302),(345,302),(346,302),(347,302),(348,308),(349,320),(350,333),(351,347),(352,671),(353,681),(354,691),(355,702),(356,713),(357,725),(358,737),(359,24999750)]'
    scan = data.decode('utf-8')
    scan = scan[2:-2]
    scan = scan.split('),(')
    scan = [i.split(',') for i in scan]
    scan = [[int(j) for j in i] for i in scan]
    scan = [i[1] for i in scan]
    print(scan)
    #print count
    print(len(scan))
    # Example usage:
    scan1 = scan
    distance, direction = calculate_odometry(scan1, scan2)
    print("Total Distance:", distance)
    print("Direction (degrees):", direction)
    scan2 = scan1

while True:
    loop()
    time.sleep(0.01)
